/*
“构造函数”是类产生实例时被调用，进行初始化设置，是一个特殊的成员函数，函数名与类名相同，没有返回值。一般构造函数定义在“public:”下面，但有时为了阻止多个实例的产生而特意定义在“private:”或“protected:”下面。当初始化时没有什么需要设定时也可以不定义，编译时会自动生成一个默认的构造函数。构造函数的重载使得实例的生成灵活而且方便，默认的构造函数没有参数，且是定义在“public:”下面的。

“析构函数”是类的实例被销毁时调用，进行最后的处理，例如释放动态分配的内存等。一般析构函数定义在“public:”下面，不需要时也可以不定义，编译时会自动生成一个默认的析构函数。析构函数的函数名与类名相同，前面有“~”返回值。
*/
#include <iostream>
using namespace std;
class CA {
    int a;
public:
    CA(){
        a = 0;
        cout << "构造函数： " << a << endl;
    }
    ~CA(){//用于实例销毁前的操作，例如内存的释放
        cout << "析构函数： " << a << endl;
    }
    void setA(int x) {
        a = x;
    }
    void print() {
        cout << "print： " << a << endl;
    }
};
int main ( )
{
    CA ca, ca2;
    //ca.a = 10;    //成员变量a是私有的，不能直接访问
    ca.setA(10);
    ca2.setA(20);
    ca2.print();
    ca.print();
    return 0;
}
/*
构造函数： 0
构造函数： 0
print： 20
print： 10
析构函数： 20
析构函数： 10
*/

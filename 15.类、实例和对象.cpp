/*
类是从C语言中的结构体演变而来，结构体的成员变量也就演化成类的成员变量，这时类只能存放数据。为了在类内部操纵这些数据，增加了成员函数的功能。所谓成员函数就是在类的内部定义，用来操作类的成员变量的函数。随后对成员变量和成员函数附上“私有”、“保护”和“公共”的访问权限，于是“类”便大致成型。事实上，C++中结构体的功能大致和类相当，也有了成员函数。“成员”是成员变量和成员函数的统称。

类的出现带动设计风格的巨大变化，与传统设计方法相区别，称之为“面向对象设计”。

“类”和结构体一样，是一种自定义的数据类型，但不是基本类型。“实例”是用自己定义的“类”这个数据类型来定义的变量。这些一个一个的实例统称“对象”。另外，“继承”和“派生”是同一件事的不同说法，B类继承了A类，也就是说A类派生了B类。
*/
class 类名 {              //|    class CSample {
访问符:                   //|    public:
    成员变量定义;         //|        int x1;
    成员函数定义;         //|        CSample();
访问符:                   //|    protected:
    成员变量定义;         //|        int a;
    成员函数定义;         //|        float sum(float f1, float f2);
访问符:                   //|    private:
    成员变量定义;         //|        int m;
    成员函数定义;         //|        double sum(double f1, double f2);
......                    //|    ......
}                         //|    }
/*
一般按习惯将private:定义部分放在紧靠类名下面，并且“private:”可以省略。“private:”下面定义的成员全是“私有”的，也就是只能在这个类的成员函数里可以使用，外部(包括派生的子类)不能使用。“public:”下面定义的成员，所有地方都能使用。“protected:”下面定义的成员，在派生的子类中则相当于“public”，其它地方则相当于“private”。
*/
